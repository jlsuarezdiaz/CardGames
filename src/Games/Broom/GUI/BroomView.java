/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Games.Broom.GUI;

import Games.Broom.Model.*;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author Javier
 */
public class BroomView extends javax.swing.JFrame {
    private Broom escobaModel;
    private static int RONDAS = 0;
    
    private void setRondas(){
        RONDAS++;
    }
    public void setBroom(Broom escobaModel) {
        this.escobaModel = escobaModel;
        currentPlayer.setPlayer(escobaModel.getCurrentPlayer());
        currentPlayer.setBroom(escobaModel);        
        fillCardPanel(table,escobaModel.getTableCards());
        
        ArrayList<Integer> punt = new ArrayList<>();
        ArrayList<String> names = new ArrayList<>();
        
        for (Player p:escobaModel.getPlayers()){
            punt.add(p.getTotalPoints());
            names.add(p.getName());
        }
        
        fillScorePanel(scores,punt,names);
        
        heap.setText(Integer.toString(escobaModel.getCardsLeft()));
        mensaje.setText("ROUNDS--> " + Integer.toString(RONDAS));
        
        set.setEnabled(true);
        play.setEnabled(true);
        nextTurn.setEnabled(false);
        currentPlayer.setVisible(true);
        repaint();
        revalidate();
    }
    

    public BroomView() {
        initComponents();
    }
    
    
    public void fillScorePanel (JPanel aPanel,ArrayList <Integer> aList,ArrayList<String> names){
        aPanel.removeAll();
        
        for(int i = 0; i < names.size(); i++){
            ScoreView aView = new ScoreView();
            aView.setScore(aList.get(i),names.get(i));
            aView.setVisible(true);
            aPanel.add(aView);
        }
        
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    public void fillCardPanel (JPanel aPanel,ArrayList <Card> aList){
        aPanel.removeAll();
        
        for(Card t: aList){
            CardView aCardView = new CardView();
            aCardView.setCard(t);
            aCardView.setVisible(true);
            aPanel.add(aCardView);
        }
        
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    
    public ArrayList<Card> getSelectedTableCards(JPanel aPanel){
        CardView tv;
        ArrayList<Card> output = new ArrayList<>();
        
        for (Component c: aPanel.getComponents()){
            tv = (CardView)c;
            
            if (tv.isSelected())
                output.add(tv.getCard());
        }
        
        return output;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        table = new javax.swing.JPanel();
        nextTurn = new javax.swing.JButton();
        play = new javax.swing.JButton();
        set = new javax.swing.JButton();
        heap = new javax.swing.JLabel();
        left = new javax.swing.JLabel();
        mensaje = new javax.swing.JLabel();
        scores = new javax.swing.JPanel();
        showCards = new javax.swing.JButton();
        currentPlayer = new Games.Broom.GUI.PlayerView();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setBorder(javax.swing.BorderFactory.createTitledBorder("Mesa"));
        table.setLayout(new java.awt.GridBagLayout());

        nextTurn.setText("Next Turn");
        nextTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTurnActionPerformed(evt);
            }
        });

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        set.setText("Set");
        set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setActionPerformed(evt);
            }
        });

        heap.setText("jLabel1");

        left.setText("Heap->");

        mensaje.setText("Mensajes...");

        scores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Puntuaciones"));
        scores.setLayout(new java.awt.GridBagLayout());

        showCards.setText("Show/Hide cards");
        showCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCardsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(scores, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(set, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nextTurn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(left)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(heap))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(showCards)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(currentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(heap)
                                        .addComponent(left))
                                    .addGap(18, 18, 18)
                                    .addComponent(nextTurn)
                                    .addGap(24, 24, 24)
                                    .addComponent(play)
                                    .addGap(18, 18, 18)
                                    .addComponent(set))
                                .addComponent(scores, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(currentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mensaje))
                            .addGap(11, 11, 11)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showCards)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTurnActionPerformed
        boolean next = escobaModel.nextTurn();
        
        if (!next){ //ha habido reparto nuevo.
            escobaModel.resetGame();
            
            boolean endOfGame = escobaModel.endOfGame();
            setRondas();
           
            if (endOfGame){
                ArrayList<Player> winners = escobaModel.tellTheWinner();
                String cadena;
               
                if (winners.size() == 1)
                    cadena = "Winner -->";
                else
                    cadena = "Winners -->";
                    
                for (Player p: winners){
                    cadena += (p.getName() + " ");
                }
                
                mensaje.setText(cadena);
            }
        }
        
        setBroom(escobaModel);
        
        set.setEnabled(true);
        play.setEnabled(true);
        nextTurn.setEnabled(false);
        showCards.setEnabled(true);
        
        repaint();
        revalidate();
    }//GEN-LAST:event_nextTurnActionPerformed

    private void setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setActionPerformed
        ArrayList<Card> s = currentPlayer.getSelectedCard(currentPlayer.getCards());
        escobaModel.getTableCards().add(s.get(0));
        currentPlayer.getPlayer().discardCard(s.get(0));
        
        setBroom(escobaModel);
        
        set.setEnabled(false);
        play.setEnabled(false);
        nextTurn.setEnabled(false);
        
        repaint();
        revalidate();
    }//GEN-LAST:event_setActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        ArrayList<Card> selected = getSelectedTableCards(table);        
        ArrayList<Card> s = currentPlayer.getSelectedCard(currentPlayer.getCards());
            
        boolean goodmove = escobaModel.goodMove(s.get(0),selected);
        
        currentPlayer.getPlayer().discardCard(s.get(0));
            
        if (!goodmove){
            escobaModel.getTableCards().add(s.get(0));
        }
        else{
            if (selected.size() == escobaModel.getTableCards().size()){
                currentPlayer.getPlayer().setScore(1);
                    
                for (Card c:selected){
                    currentPlayer.getPlayer().addCardHeap(c);
                    escobaModel.discardTableCard(c);
                }
                
                currentPlayer.getPlayer().addCardHeap(s.get(0));
            }
            else{
                for (Card c:selected){
                    currentPlayer.getPlayer().addCardHeap(c);
                    escobaModel.discardTableCard(c);
                }
                
                currentPlayer.getPlayer().addCardHeap(s.get(0));
           }
        }
        
        
        setBroom(escobaModel);
        
        set.setEnabled(false);
        play.setEnabled(false);
        nextTurn.setEnabled(false);
        
        
        repaint();
        revalidate();
    }//GEN-LAST:event_playActionPerformed

    private void showCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCardsActionPerformed
        if(currentPlayer.isVisible())
            currentPlayer.setVisible(false);
        else
            currentPlayer.setVisible(true);
        
        nextTurn.setEnabled(true);
        showCards.setEnabled(false);
        repaint();
        revalidate();
        
    }//GEN-LAST:event_showCardsActionPerformed

    public void showView() {
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Games.Broom.GUI.PlayerView currentPlayer;
    private javax.swing.JLabel heap;
    private javax.swing.JLabel left;
    private javax.swing.JLabel mensaje;
    private javax.swing.JButton nextTurn;
    private javax.swing.JButton play;
    private javax.swing.JPanel scores;
    private javax.swing.JButton set;
    private javax.swing.JButton showCards;
    private javax.swing.JPanel table;
    // End of variables declaration//GEN-END:variables
}
